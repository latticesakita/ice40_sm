
/*******************************************************************************
    Verilog netlist generated by IPGEN Lattice Propel (64-bit)
    2025.1.0.2506031608
    Soft IP Version: 1.0.0
    2025 09 02 15:04:48
*******************************************************************************/
/*******************************************************************************
    Wrapper Module generated per user settings.
*******************************************************************************/
(* ORIG_MODULE_NAME="ice40_ip_if", LATTICE_IP_GENERATED="1" *) module ice40_ip_if (clk, 
        resetn, 
        int_o, 
        HADDR, 
        HBURST, 
        HTRANS, 
        HSIZE, 
        HWRITE, 
        HSEL, 
        HREADY, 
        HWDATA, 
        HRDATA, 
        HREADYOUT, 
        HRESP, 
        ip_addr_o, 
        ip_wdata_o, 
        ip_rdata_i, 
        ip_we_o, 
        ip_stb_o, 
        ip_int_i, 
        ip_ack_i) ;
    input clk ; 
    input resetn ; 
    output int_o ; 
    input [31:0] HADDR ; 
    input [2:0] HBURST ; 
    input [1:0] HTRANS ; 
    input [2:0] HSIZE ; 
    input HWRITE ; 
    input HSEL ; 
    input HREADY ; 
    input [31:0] HWDATA ; 
    output [31:0] HRDATA ; 
    output HREADYOUT ; 
    output HRESP ; 
    output [7:0] ip_addr_o ; 
    output [7:0] ip_wdata_o ; 
    input [7:0] ip_rdata_i ; 
    output ip_we_o ; 
    output ip_stb_o ; 
    input [1:0] ip_int_i ; 
    input ip_ack_i ; 
    ice40_ip_if_ipgen_ice40_ip_if_ahb ice40_ip_if_ahb_inst (.clk(clk), 
                .resetn(resetn), 
                .int_o(int_o), 
                .HADDR(HADDR[31:0]), 
                .HBURST(HBURST[2:0]), 
                .HTRANS(HTRANS[1:0]), 
                .HSIZE(HSIZE[2:0]), 
                .HWRITE(HWRITE), 
                .HSEL(HSEL), 
                .HREADY(HREADY), 
                .HWDATA(HWDATA[31:0]), 
                .HRDATA(HRDATA[31:0]), 
                .HREADYOUT(HREADYOUT), 
                .HRESP(HRESP), 
                .ip_addr_o(ip_addr_o[7:0]), 
                .ip_wdata_o(ip_wdata_o[7:0]), 
                .ip_rdata_i(ip_rdata_i[7:0]), 
                .ip_we_o(ip_we_o), 
                .ip_stb_o(ip_stb_o), 
                .ip_int_i(ip_int_i[1:0]), 
                .ip_ack_i(ip_ack_i)) ; 
endmodule



// support only single write, single read
// HSIZE is for write operation is not supported
// HSIZE is only for read operation
module ice40_ip_if_ipgen_ice40_ip_if_ahb (
    input clk, 
    input resetn, 
    output int_o, 
    input [31:0] HADDR, 
    input [2:0] HBURST, 
    input [1:0] HTRANS, 
    input [2:0] HSIZE, 
    input HWRITE, 
    input HSEL, 
    input HREADY, 
    input [31:0] HWDATA, 
    output [31:0] HRDATA, 
    output HREADYOUT, 
    output HRESP, 
    output [7:0] ip_addr_o, 
    output [7:0] ip_wdata_o, 
    input [7:0] ip_rdata_i, 
    output ip_we_o, 
    output ip_stb_o, 
    input [1:0] ip_int_i, 
    input ip_ack_i) ;
    reg [7:0] r_rdata ; 
    reg r_we ; 
    reg r_hready ; 
    reg r_stb ; 
    reg [7:0] r_ip_addr ; 
    wire ahb_access ; 
    assign HREADYOUT = r_hready ; 
    assign HRDATA = {24'b0,
                r_rdata[7:0]} ; 
    assign HRESP = 1'b0 ; 
    assign ahb_access = (HSEL && HTRANS[1]) ; 
    assign ip_addr_o = r_ip_addr ; 
    assign ip_wdata_o = HWDATA[7:0] ; 
    assign ip_we_o = r_we ; 
    assign ip_stb_o = r_stb ; 
    assign int_o = (|ip_int_i) ; 
    always
        @(posedge clk or 
            negedge resetn)
        begin
            if ((!resetn)) 
                begin
                    r_hready <=  1'b1 ;
                    r_rdata <=  8'h00 ;
                    r_stb <=  1'b0 ;
                    r_we <=  1'b0 ;
                    r_ip_addr <=  8'h00 ;
                end
            else
                if (ahb_access) 
                    begin
                        r_hready <=  1'b0 ;
                        r_rdata <=  8'h00 ;
                        r_stb <=  1'b1 ;
                        r_we <=  HWRITE ;
                        r_ip_addr <=  HADDR[9:2] ;
                    end
                else
                    if (((r_hready == 1'b0) && (ip_ack_i == 1'b1))) 
                        begin
                            r_hready <=  1'b1 ;
                            r_rdata <=  ip_rdata_i[7:0] ;
                            r_stb <=  1'b0 ;
                            r_we <=  0 ;
                        end
        end
endmodule


