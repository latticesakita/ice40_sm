// >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
// ------------------------------------------------------------------
// Copyright (c) 2019-2025 by Lattice Semiconductor Corporation
// ALL RIGHTS RESERVED
// ------------------------------------------------------------------
//
// IMPORTANT: THIS FILE IS USED BY OR GENERATED BY the LATTICE PROPEL?
// DEVELOPMENT SUITE, WHICH INCLUDES PROPEL BUILDER AND PROPEL SDK.
//
// Lattice grants permission to use this code pursuant to the
// terms of the Lattice Propel License Agreement.
//
// DISCLAIMER:
//
//  LATTICE MAKES NO WARRANTIES ON THIS FILE OR ITS CONTENTS, WHETHER
//  EXPRESSED, IMPLIED, STATUTORY, OR IN ANY PROVISION OF THE LATTICE
//  PROPEL LICENSE AGREEMENT OR COMMUNICATION WITH LICENSEE, AND LATTICE
//  SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF MERCHANTABILITY OR
//  FITNESS FOR A PARTICULAR PURPOSE.  LATTICE DOES NOT WARRANT THAT THE
//  FUNCTIONS CONTAINED HEREIN WILL MEET LICENSEE'S REQUIREMENTS, OR THAT
//  LICENSEE'S OPERATION OF ANY DEVICE, SOFTWARE OR SYSTEM USING THIS FILE
//  OR ITS CONTENTS WILL BE UNINTERRUPTED OR ERROR FREE, OR THAT DEFECTS
//  HEREIN WILL BE CORRECTED.  LICENSEE ASSUMES RESPONSIBILITY FOR 
//  SELECTION OF MATERIALS TO ACHIEVE ITS INTENDED RESULTS, AND FOR THE
//  PROPER INSTALLATION, USE, AND RESULTS OBTAINED THEREFROM.  LICENSEE
//  ASSUMES THE ENTIRE RISK OF THE FILE AND ITS CONTENTS PROVING DEFECTIVE
//  OR FAILING TO PERFORM PROPERLY AND IN SUCH EVENT, LICENSEE SHALL
//  ASSUME THE ENTIRE COST AND RISK OF ANY REPAIR, SERVICE, CORRECTION, OR
//  ANY OTHER LIABILITIES OR DAMAGES CAUSED BY OR ASSOCIATED WITH THE
//  SOFTWARE.  IN NO EVENT SHALL LATTICE BE LIABLE TO ANY PARTY FOR DIRECT,
//  INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST
//  PROFITS, ARISING OUT OF THE USE OF THIS FILE OR ITS CONTENTS, EVEN IF
//  LATTICE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. LATTICE'S
//  SOLE LIABILITY, AND LICENSEE'S SOLE REMEDY, IS SET FORTH ABOVE. 
//  LATTICE DOES NOT WARRANT OR REPRESENT THAT THIS FILE, ITS CONTENTS OR
//  USE THEREOF DOES NOT INFRINGE ON THIRD PARTIES' INTELLECTUAL PROPERTY
//  RIGHTS, INCLUDING ANY PATENT. IT IS THE USER'S RESPONSIBILITY TO VERIFY
//  THE USER SOFTWARE DESIGN FOR CONSISTENCY AND FUNCTIONALITY THROUGH THE
//  USE OF FORMAL SOFTWARE VALIDATION METHODS.
// ------------------------------------------------------------------
// instatiate SP256K

module spram32768x32 (
	input clk_i,
	input [14:0] addr_i  ,
	input wr_en_i    ,
	input [3:0] mask_we,
	input [31:0] wr_data_i  ,
	output [31:0] rd_data_o  
);

reg r_addr14 = 0;
wire       we0;
wire       we1;
wire [3:0] maskwe0;
wire [3:0] maskwe1;
wire [31:0] rd_data_o0;
wire [31:0] rd_data_o1;
assign maskwe0 = {mask_we[1],mask_we[1],mask_we[0],mask_we[0]};
assign maskwe1 = {mask_we[3],mask_we[3],mask_we[2],mask_we[2]};
assign we0 = wr_en_i & (~addr_i[14]);
assign we1 = wr_en_i & ( addr_i[14]);
assign rd_data_o = (r_addr14 == 0) ? rd_data_o0 : rd_data_o1;

always @(posedge clk_i) begin
	r_addr14 <= addr_i[14];
end


SP256K u_spram16k_16_0 (
  .AD       (addr_i		),  // I
  .DI       (wr_data_i[15:0]	),  // I
  .MASKWE   (maskwe0		),  // I
  .WE       (we0		),  // I
  .CS       (1'b1		),  // I
  .CK       (clk_i		),  // I
  .STDBY    (1'b0		),  // I
  .SLEEP    (1'b0		),  // I
  .PWROFF_N (1'b1		),  // I
  .DO       (rd_data_o0[15:0]	)   // O
);
SP256K u_spram16k_16_1 (
  .AD       (addr_i		),  // I
  .DI       (wr_data_i[31:16]	),  // I
  .MASKWE   (maskwe1		),  // I
  .WE       (we0		),  // I
  .CS       (1'b1		),  // I
  .CK       (clk_i		),  // I
  .STDBY    (1'b0		),  // I
  .SLEEP    (1'b0		),  // I
  .PWROFF_N (1'b1		),  // I
  .DO       (rd_data_o0[31:16]	)   // O
);
SP256K u_spram16k_16_2 (
  .AD       (addr_i		),  // I
  .DI       (wr_data_i[15:0]	),  // I
  .MASKWE   (maskwe0		),  // I
  .WE       (we1		),  // I
  .CS       (1'b1		),  // I
  .CK       (clk_i		),  // I
  .STDBY    (1'b0		),  // I
  .SLEEP    (1'b0		),  // I
  .PWROFF_N (1'b1		),  // I
  .DO       (rd_data_o1[15:0]	)   // O
);
SP256K u_spram16k_16_3 (
  .AD       (addr_i		),  // I
  .DI       (wr_data_i[31:16]	),  // I
  .MASKWE   (maskwe1		),  // I
  .WE       (we1		),  // I
  .CS       (1'b1		),  // I
  .CK       (clk_i		),  // I
  .STDBY    (1'b0		),  // I
  .SLEEP    (1'b0		),  // I
  .PWROFF_N (1'b1		),  // I
  .DO       (rd_data_o1[31:16]	)   // O
);

endmodule
// vim:foldmethod=marker: 
