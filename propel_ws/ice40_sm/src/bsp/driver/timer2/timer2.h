// >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
// ------------------------------------------------------------------
// Copyright (c) 2019-2025 by Lattice Semiconductor Corporation
// ALL RIGHTS RESERVED
// ------------------------------------------------------------------
//
// IMPORTANT: THIS FILE IS USED BY OR GENERATED BY the LATTICE PROPEL
// DEVELOPMENT SUITE, WHICH INCLUDES PROPEL BUILDER AND PROPEL SDK.
//
// Lattice grants permission to use this code pursuant to the
// terms of the Lattice Propel License Agreement.
//
// DISCLAIMER:
//
//  LATTICE MAKES NO WARRANTIES ON THIS FILE OR ITS CONTENTS, WHETHER
//  EXPRESSED, IMPLIED, STATUTORY, OR IN ANY PROVISION OF THE LATTICE
//  PROPEL LICENSE AGREEMENT OR COMMUNICATION WITH LICENSEE, AND LATTICE 
//  SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF MERCHANTABILITY OR
//  FITNESS FOR A PARTICULAR PURPOSE.  LATTICE DOES NOT WARRANT THAT THE
//  FUNCTIONS CONTAINED HEREIN WILL MEET LICENSEE'S REQUIREMENTS, OR THAT
//  LICENSEE'S OPERATION OF ANY DEVICE, SOFTWARE OR SYSTEM USING THIS FILE
//  OR ITS CONTENTS WILL BE UNINTERRUPTED OR ERROR FREE, OR THAT DEFECTS
//  HEREIN WILL BE CORRECTED.  LICENSEE ASSUMES RESPONSIBILITY FOR 
//  SELECTION OF MATERIALS TO ACHIEVE ITS INTENDED RESULTS, AND FOR THE
//  PROPER INSTALLATION, USE, AND RESULTS OBTAINED THEREFROM.  LICENSEE
//  ASSUMES THE ENTIRE RISK OF THE FILE AND ITS CONTENTS PROVING DEFECTIVE
//  OR FAILING TO PERFORM PROPERLY AND IN SUCH EVENT, LICENSEE SHALL 
//  ASSUME THE ENTIRE COST AND RISK OF ANY REPAIR, SERVICE, CORRECTION, OR
//  ANY OTHER LIABILITIES OR DAMAGES CAUSED BY OR ASSOCIATED WITH THE 
//  SOFTWARE.  IN NO EVENT SHALL LATTICE BE LIABLE TO ANY PARTY FOR DIRECT,
//  INDIRECT,SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST
//  PROFITS, ARISING OUT OF THE USE OF THIS FILE OR ITS CONTENTS, EVEN IF
//  LATTICE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. LATTICE'S
//  SOLE LIABILITY, AND LICENSEE'S SOLE REMEDY, IS SET FORTH ABOVE.  
//  LATTICE DOES NOT WARRANT OR REPRESENT THAT THIS FILE, ITS CONTENTS OR
//  USE THEREOF DOES NOT INFRINGE ON THIRD PARTIES' INTELLECTUAL PROPERTY
//  RIGHTS, INCLUDING ANY PATENT. IT IS THE USER'S RESPONSIBILITY TO VERIFY
//  THE USER SOFTWARE DESIGN FOR CONSISTENCY AND FUNCTIONALITY THROUGH THE
//  USE OF FORMAL SOFTWARE VALIDATION METHODS.
// ------------------------------------------------------------------
#ifndef _TIMER_H_
#define _TIMER_H_
#include <stdint.h>
// timer0 is used for delay function

#define TIMER0_INT	0x001
#define TIMER1_INT	0x002
#define TIMER2_INT	0x004
#define TIMER3_INT	0x008

#define TIMER0_SRC	0x00
#define TIMER1_SRC	0x01
#define TIMER2_SRC	0x02
#define TIMER3_SRC	0x03

#define TIMER_REPEAT 0x01
#define TIMER_ONESHOT 0x00


struct timer2_dev {
	volatile unsigned inta       ;// Alarm all (readonly)
	volatile unsigned clocks     ;//  Clocks
	volatile unsigned ticks      ;//  Ticks
	volatile unsigned prescale   ;//  Prescale
	volatile unsigned int0       ;// Alarm0 / interrupts
	volatile unsigned int1       ;// Alarm1 / interrupts
	volatile unsigned int2       ;// Alarm2 / interrupts
	volatile unsigned int3       ;// Alarm3 / interrupts
	volatile unsigned repeat0_en ;//  Alarm0 repeat enable
	volatile unsigned repeat1_en ;//  Alarm1 repeat enable
	volatile unsigned repeat2_en ;//  Alarm2 repeat enable
	volatile unsigned repeat3_en ;//  Alarm3 repeat enable
	volatile unsigned set0       ;// Alarm0 set & enable
	volatile unsigned set1       ;// Alarm1 set & enable
	volatile unsigned set2       ;// Alarm2 set & enable
	volatile unsigned set3       ;// Alarm3 set & enable
	volatile unsigned end0       ;// Alarm0 end time
	volatile unsigned end1       ;// Alarm1 end time
	volatile unsigned end2       ;// Alarm2 end time
	volatile unsigned end3       ;// Alarm3 end time
	volatile unsigned en0        ;// Alarm0 enable/disable
	volatile unsigned en1        ;// Alarm1 enable/disable
	volatile unsigned en2        ;// Alarm2 enable/disable
	volatile unsigned en3        ;// Alarm3 enable/disable
	volatile unsigned int0_en    ;// Alarm0 / interrupts
	volatile unsigned int1_en    ;// Alarm1 / interrupts
	volatile unsigned int2_en    ;// Alarm2 / interrupts
	volatile unsigned int3_en    ;// Alarm3 / interrupts
};

void timer2_isr(void *ctx);
unsigned char timer2_init(
		unsigned int base_addr,
		unsigned int prescale);
void timer2_register(unsigned char src, void (*func)());
void timer2_set(unsigned char src, uint32_t period, uint32_t repeat);
void timer2_disable(unsigned char src);
void usleep(unsigned int val);

#endif
